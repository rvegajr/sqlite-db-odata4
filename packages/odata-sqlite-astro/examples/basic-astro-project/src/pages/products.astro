---
import { ConnectionAdapter } from 'odata-sqlite-core';
import { AstroODataHandler } from 'odata-sqlite-astro';

// Define schemas (same as API route)
const productsSchema = {
  name: 'products',
  columns: [
    { name: 'id', type: 'INTEGER', primaryKey: true, nullable: false },
    { name: 'name', type: 'TEXT', primaryKey: false, nullable: false },
    { name: 'price', type: 'REAL', primaryKey: false, nullable: false },
    { name: 'category_id', type: 'INTEGER', primaryKey: false, nullable: false },
    { name: 'description', type: 'TEXT', primaryKey: false, nullable: true }
  ]
};

const categoriesSchema = {
  name: 'categories',
  columns: [
    { name: 'id', type: 'INTEGER', primaryKey: true, nullable: false },
    { name: 'name', type: 'TEXT', primaryKey: false, nullable: false },
    { name: 'description', type: 'TEXT', primaryKey: false, nullable: true }
  ]
};

const relationships = [
  {
    fromTable: 'products',
    fromColumn: 'category_id',
    toTable: 'categories',
    toColumn: 'id',
    name: 'category'
  }
];

// Create connection and handler
const connection = await ConnectionAdapter.create({
  type: 'local',
  database: './data.db'
});

const handler = new AstroODataHandler({
  connection,
  schemas: {
    'Products': productsSchema,
    'Categories': categoriesSchema
  },
  relationships
});

// Use OData queries in Astro SSR
const products = await handler.executeODataQuery('products', productsSchema, {
  filter: { field: 'price', operator: 'gt', value: 100 },
  expand: [{ path: 'category' }],
  compute: [{ expression: 'price * 1.1', as: 'price_with_tax' }],
  orderBy: [{ field: 'price', direction: 'desc' }],
  top: 10
});

// Get categories for the filter dropdown
const categories = await handler.executeODataQuery('categories', categoriesSchema, {
  orderBy: [{ field: 'name', direction: 'asc' }]
});
---

<html lang="en">
<head>
  <meta charset="utf-8" />
  <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
  <meta name="viewport" content="width=device-width" />
  <meta name="generator" content={Astro.generator} />
  <title>Products - OData v4 Astro Integration</title>
  <style>
    body {
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
      max-width: 1200px;
      margin: 0 auto;
      padding: 20px;
      background-color: #f5f5f5;
    }
    .header {
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      color: white;
      padding: 40px;
      border-radius: 10px;
      margin-bottom: 30px;
      text-align: center;
    }
    .filters {
      background: white;
      padding: 20px;
      border-radius: 10px;
      margin-bottom: 20px;
      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    .filter-group {
      display: flex;
      gap: 15px;
      align-items: center;
      flex-wrap: wrap;
    }
    .filter-group label {
      font-weight: 600;
      color: #333;
    }
    .filter-group input, .filter-group select {
      padding: 8px 12px;
      border: 1px solid #ddd;
      border-radius: 5px;
      font-size: 14px;
    }
    .filter-group button {
      background: #667eea;
      color: white;
      border: none;
      padding: 8px 16px;
      border-radius: 5px;
      cursor: pointer;
      font-size: 14px;
    }
    .filter-group button:hover {
      background: #5a6fd8;
    }
    .products-grid {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
      gap: 20px;
    }
    .product-card {
      background: white;
      border-radius: 10px;
      padding: 20px;
      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
      transition: transform 0.2s;
    }
    .product-card:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 8px rgba(0,0,0,0.15);
    }
    .product-name {
      font-size: 18px;
      font-weight: 600;
      color: #333;
      margin-bottom: 10px;
    }
    .product-price {
      font-size: 24px;
      font-weight: 700;
      color: #667eea;
      margin-bottom: 5px;
    }
    .product-price-with-tax {
      font-size: 14px;
      color: #666;
      margin-bottom: 10px;
    }
    .product-category {
      background: #f0f0f0;
      padding: 4px 8px;
      border-radius: 4px;
      font-size: 12px;
      color: #666;
      display: inline-block;
    }
    .product-description {
      color: #666;
      margin-top: 10px;
      line-height: 1.5;
    }
    .stats {
      background: white;
      padding: 20px;
      border-radius: 10px;
      margin-bottom: 20px;
      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    .stats-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
      gap: 20px;
    }
    .stat-item {
      text-align: center;
    }
    .stat-value {
      font-size: 32px;
      font-weight: 700;
      color: #667eea;
    }
    .stat-label {
      color: #666;
      font-size: 14px;
      margin-top: 5px;
    }
  </style>
</head>
<body>
  <div class="header">
    <h1>üöÄ OData v4 Astro Integration</h1>
    <p>Powerful, type-safe OData v4 queries with SQLite support</p>
  </div>

  <div class="stats">
    <h2>üìä Product Statistics</h2>
    <div class="stats-grid">
      <div class="stat-item">
        <div class="stat-value">{products.data.length}</div>
        <div class="stat-label">Products (Price > $100)</div>
      </div>
      <div class="stat-item">
        <div class="stat-value">${products.data.reduce((sum, p) => sum + p.price, 0).toFixed(2)}</div>
        <div class="stat-label">Total Value</div>
      </div>
      <div class="stat-item">
        <div class="stat-value">${(products.data.reduce((sum, p) => sum + p.price, 0) / products.data.length).toFixed(2)}</div>
        <div class="stat-label">Average Price</div>
      </div>
      <div class="stat-item">
        <div class="stat-value">{categories.data.length}</div>
        <div class="stat-label">Categories</div>
      </div>
    </div>
  </div>

  <div class="filters">
    <h2>üîç Filter Products</h2>
    <div class="filter-group">
      <label for="minPrice">Min Price:</label>
      <input type="number" id="minPrice" placeholder="100" />
      
      <label for="category">Category:</label>
      <select id="category">
        <option value="">All Categories</option>
        {categories.data.map(category => (
          <option value={category.id}>{category.name}</option>
        ))}
      </select>
      
      <label for="search">Search:</label>
      <input type="text" id="search" placeholder="Search products..." />
      
      <button onclick="loadProducts()">Apply Filters</button>
    </div>
  </div>

  <div class="products-grid">
    {products.data.map(product => (
      <div class="product-card">
        <div class="product-name">{product.name}</div>
        <div class="product-price">${product.price.toFixed(2)}</div>
        <div class="product-price-with-tax">With Tax: ${product.price_with_tax.toFixed(2)}</div>
        {product.category && (
          <div class="product-category">{product.category.name}</div>
        )}
        {product.description && (
          <div class="product-description">{product.description}</div>
        )}
      </div>
    ))}
  </div>

  <script>
    async function loadProducts() {
      const minPrice = document.getElementById('minPrice').value;
      const category = document.getElementById('category').value;
      const search = document.getElementById('search').value;
      
      // Build OData query parameters
      const params = new URLSearchParams();
      
      if (minPrice) {
        params.append('$filter', `price gt ${minPrice}`);
      }
      
      if (category) {
        params.append('$filter', `category_id eq ${category}`);
      }
      
      if (search) {
        params.append('$search', search);
      }
      
      // Always include these for consistency
      params.append('$expand', 'category');
      params.append('$compute', 'price * 1.1 as price_with_tax');
      params.append('$orderby', 'price desc');
      params.append('$top', '10');
      
      try {
        const response = await fetch(`/api/odata/Products?${params}`);
        const data = await response.json();
        
        // Update the products grid
        const productsGrid = document.querySelector('.products-grid');
        productsGrid.innerHTML = data.value.map(product => `
          <div class="product-card">
            <div class="product-name">${product.name}</div>
            <div class="product-price">$${product.price.toFixed(2)}</div>
            <div class="product-price-with-tax">With Tax: $${product.price_with_tax.toFixed(2)}</div>
            ${product.category ? `<div class="product-category">${product.category.name}</div>` : ''}
            ${product.description ? `<div class="product-description">${product.description}</div>` : ''}
          </div>
        `).join('');
        
        // Update stats
        const totalValue = data.value.reduce((sum, p) => sum + p.price, 0);
        const avgPrice = data.value.length > 0 ? totalValue / data.value.length : 0;
        
        document.querySelector('.stat-value').textContent = data.value.length;
        document.querySelectorAll('.stat-value')[1].textContent = `$${totalValue.toFixed(2)}`;
        document.querySelectorAll('.stat-value')[2].textContent = `$${avgPrice.toFixed(2)}`;
        
      } catch (error) {
        console.error('Error loading products:', error);
        alert('Error loading products. Please try again.');
      }
    }
    
    // Load products on page load
    document.addEventListener('DOMContentLoaded', () => {
      // Set default min price to 100
      document.getElementById('minPrice').value = '100';
    });
  </script>
</body>
</html>
